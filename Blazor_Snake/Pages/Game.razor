@page "/game"
@using Snake.Core.ViewModels;
@inject MainWindowViewModel Vm;
@inject NavigationManager NavManager;
@inject IJSRuntime JsRuntime;
@implements IDisposable;


<PageTitle>Game</PageTitle>

<div class="game__container">
    @for(int i = 0; i < Vm.TotalGameGridCells; i++)
    {
        var snake = Vm.Snake.FirstOrDefault(item => item.PositionIndex == i);
        if(Vm.Fruit.PositionIndex == i)
        {
            <div class="game__fruit_cell"></div>
        }
        else if(snake != null)
        {
            if(snake.Rgb == CellViewModel.SNAKE_HEAD_RGB)
            {
                <div class="game__snake_head"></div>
            }
            else if(snake.Rgb == CellViewModel.SNAKE_BODY1_RGB)
            {
                <div class="game__snake_body1"></div>
            }
            else if(snake.Rgb == CellViewModel.SNAKE_BODY2_RGB)
            {
                <div class="game__snake_body2"></div>
            }
            else
            {
                <div class="game__snake_body3"></div>
            }
        }
        else
        {
            <div class="game__empty_cell"></div>
        }
    }
</div>

@code{
    protected override async Task OnInitializedAsync()
    {
        Vm.Play();
        Vm.UiUpdateAction = Update;
        Vm.GameoverAction = () => NavManager.NavigateTo("/highScores");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("JsFunctions.addKeyboardListenersEvent");
        }
    }

    private void Update()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        Vm.Cancellation.Cancel();
    }
}